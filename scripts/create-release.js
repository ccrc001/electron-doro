#!/usr/bin/env node

const { execSync } = require('child_process')
const fs = require('fs')
const path = require('path')

// ËØªÂèñ package.json Ëé∑ÂèñÁâàÊú¨Âè∑
const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'))
const version = packageJson.version
const tagName = `v${version}`

console.log(`üöÄ Creating release for version ${version}`)

// GitHub Actions ÈúÄË¶ÅÁöÑÊ†∏ÂøÉÊñá‰ª∂ÂàóË°®
const requiredFiles = [
  'package.json',
  'package-lock.json',
  'tsconfig.json',
  'tsconfig.node.json',
  'tsconfig.web.json',
  'electron.vite.config.ts',
  'electron-builder.yml',
  'eslint.config.mjs',
  '.prettierrc.yaml',
  '.prettierignore',
  'src/',
  '.github/',
  'scripts/',
  '.gitignore',
  '.gitattributes',
  'README.md'
]

function addRequiredFiles() {
  console.log('üìÅ Adding required files for GitHub Actions...')

  // Âè™Ê∑ªÂä†ÂøÖË¶ÅÁöÑÊñá‰ª∂
  requiredFiles.forEach((file) => {
    if (fs.existsSync(file)) {
      try {
        execSync(`git add "${file}"`, { stdio: 'pipe' })
        console.log(`‚úÖ Added: ${file}`)
      } catch (error) {
        console.log(`‚ö†Ô∏è  Could not add: ${file}`)
      }
    }
  })
}

try {
  // Ê£ÄÊü•ÊòØÂê¶ÊúâÊú™Êèê‰∫§ÁöÑÊõ¥Êîπ
  try {
    execSync('git diff --exit-code', { stdio: 'pipe' })
    execSync('git diff --cached --exit-code', { stdio: 'pipe' })
    console.log('‚úÖ No uncommitted changes found')
  } catch (error) {
    console.log('üìù Found uncommitted changes, adding required files...')
    addRequiredFiles()

    // Ê£ÄÊü•ÊòØÂê¶ÊúâÊñá‰ª∂Ë¢´Ê∑ªÂä†Âà∞ÊöÇÂ≠òÂå∫
    try {
      const stagedFiles = execSync('git diff --cached --name-only', { encoding: 'utf8' })
      if (stagedFiles.trim()) {
        execSync(`git commit -m "release: v${version}"`, { stdio: 'inherit' })
        console.log('‚úÖ Committed required files')
      } else {
        console.log('‚ÑπÔ∏è  No required files to commit')
      }
    } catch (commitError) {
      console.log('‚ö†Ô∏è  Nothing to commit')
    }
  }

  // Ê£ÄÊü•Ê†áÁ≠æÊòØÂê¶Â∑≤Â≠òÂú®
  try {
    execSync(`git rev-parse ${tagName}`, { stdio: 'pipe' })
    console.log(`‚ö†Ô∏è  Tag ${tagName} already exists, deleting it...`)
    execSync(`git tag -d ${tagName}`, { stdio: 'inherit' })
  } catch (error) {
    // Ê†áÁ≠æ‰∏çÂ≠òÂú®ÔºåËøôÊòØÊ≠£Â∏∏ÁöÑ
  }

  // ÂàõÂª∫Êñ∞Ê†áÁ≠æ
  console.log(`üè∑Ô∏è  Creating tag ${tagName}...`)
  execSync(`git tag -a ${tagName} -m "Release ${version}"`, { stdio: 'inherit' })

  // Êé®ÈÄÅ‰ª£Á†ÅÂíåÊ†áÁ≠æ
  console.log('üì§ Preparing to push to GitHub...')

  // Ëé∑ÂèñÂΩìÂâçÂàÜÊîØÂêç
  const currentBranch = execSync('git branch --show-current', { encoding: 'utf8' }).trim()
  console.log(`üì§ Current branch: ${currentBranch}`)

  // Ê£ÄÊü•ËøúÁ®ãÈªòËÆ§ÂàÜÊîØ
  try {
    const remoteHead = execSync('git ls-remote --symref origin HEAD', { encoding: 'utf8' })
    const defaultBranch = remoteHead.match(/ref: refs\/heads\/(\w+)/)?.[1] || 'main'
    console.log(`üì§ Remote default branch: ${defaultBranch}`)

    // Â¶ÇÊûúÂΩìÂâçÂàÜÊîØ‰∏éËøúÁ®ãÈªòËÆ§ÂàÜÊîØ‰∏çÂêåÔºåÁªôÂá∫ÊèêÁ§∫
    if (currentBranch !== defaultBranch) {
      console.log(
        `‚ö†Ô∏è  Warning: Local branch '${currentBranch}' differs from remote default '${defaultBranch}'`
      )
      console.log(`üì§ Will push to current branch: ${currentBranch}`)
    }
  } catch {
    console.log('‚ö†Ô∏è  Could not determine remote default branch, using current branch')
  }

  // ÂÖàÊãâÂèñËøúÁ®ãÊõ¥Êîπ
  console.log('üì• Fetching remote changes...')
  try {
    execSync('git fetch origin', { stdio: 'pipe' })
    console.log('‚úÖ Fetch completed')

    // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÂêàÂπ∂
    try {
      const status = execSync(`git status --porcelain -b`, { encoding: 'utf8' })
      if (status.includes('behind')) {
        console.log('üì• Remote has new commits, pulling changes...')
        execSync(`git pull origin ${currentBranch}`, { stdio: 'inherit' })
      }
    } catch (pullError) {
      console.log('‚ö†Ô∏è  Could not pull automatically, you may need to resolve conflicts manually')
      console.log('üí° Try running: git pull origin ' + currentBranch)
      throw pullError
    }
  } catch {
    console.log('‚ö†Ô∏è  Network error: Could not fetch remote changes')
    console.log('üîÑ Attempting to push without fetch...')
    console.log('üí° If push fails, check your network connection and try again')
    // ‰∏çÊäõÂá∫ÈîôËØØÔºåÁªßÁª≠Â∞ùËØïÊé®ÈÄÅ
  }

  // Êé®ÈÄÅ‰ª£Á†ÅÂíåÊ†áÁ≠æ
  console.log('üì§ Pushing to GitHub...')
  try {
    execSync(`git push origin ${currentBranch}`, { stdio: 'inherit' })
    console.log('‚úÖ Branch pushed successfully')

    execSync(`git push origin ${tagName}`, { stdio: 'inherit' })
    console.log('‚úÖ Tag pushed successfully')
  } catch (pushError) {
    console.log('‚ùå Push failed.')

    // Ê£ÄÊü•ÊòØÂê¶ÊòØÁΩëÁªúÈóÆÈ¢ò
    if (
      pushError.message.includes('unable to access') ||
      pushError.message.includes('Failed to connect') ||
      pushError.message.includes('Connection was reset')
    ) {
      console.log('üåê Network connection issue detected')
      console.log('üí° Please check your internet connection and try again')
      console.log('üí° You can also try using a VPN or different network')
    } else if (
      pushError.message.includes('non-fast-forward') ||
      pushError.message.includes('fetch first')
    ) {
      console.log('üîÑ Remote has newer commits')
      console.log('üí° Try running: git pull origin ' + currentBranch)
    } else if (pushError.message.includes('already exists')) {
      console.log('üè∑Ô∏è  Tag already exists on remote')
      console.log('üí° Delete remote tag first: git push origin --delete ' + tagName)
    }

    throw pushError
  }

  console.log('‚úÖ Release created successfully!')
  console.log(`üîó GitHub Actions will automatically build and publish the release.`)
  console.log(`üì¶ Check the Actions tab: https://github.com/ccrc001/diy-electron-doro/actions`)
  console.log('')
  console.log('üìã Files pushed to GitHub:')
  requiredFiles.forEach((file) => {
    if (fs.existsSync(file)) {
      console.log(`   ‚úì ${file}`)
    }
  })
} catch (error) {
  console.error('‚ùå Error creating release:', error.message)
  process.exit(1)
}
